<?php

namespace App\Console\Commands\ZXZJ\Word;

use App\Foundation\Excel;
use App\Foundation\PdoBuilder;
use Carbon\Carbon;
use Illuminate\Console\Command;

class UpdateStudentFluencySingle extends Command
{

    use PdoBuilder;
    use Excel;
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'update:student:fluency:single {pdo=local}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '单个学生进行fluency 更新';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }


    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {

//        $ids = [
//
//
////            13071,13062,13058,13,12,11,10,9,8,19,18,17,16,15,14,25,24,23,22,21,20,34,33,32,31,30,29,35,37,36,39,38,40,42,41,48,47,46,45,44,43,53,52,51,50,49,55,54,56,57,62,61,60,59,65,64,63,16431,71,70,69,68,67,66,72,73,75,74,77,76,78,80,85,84,83,82,81,90,89,88,87,86,93,92,91,100,99,98,97,96,95,94,103,102,101,105,104,107,106,110,109,108,16435,112,111,16438,16437,119,120,118,117,116,115,114,113,125,124,123,122,121,128,127,126,130,129,133,132,134,136,138,137,140,139,145,144,143,142,146,149,148,147,152,151,150,155,154,153,157,156,159,158,161,160,162,163,165,164,168,167,166,169,170,175,174,173,172,171,180,179,178,177,176,183,182,181,184,192,191,190,189,188,187,186,185,16451,196,195,194,193,16454,199,198,197,200,204,203,202,201,205,207,206,208,210,209,16457,216,215,214,213,212,217,218,221,220,219,222,16463,225,224,223,228,227,226,229,233,232,231,230,16465,236,235,234,238,237,239,246,245,244,243,242,241,240,247,249,248,254,253,252,251,250,16470,259,258,257,256,255,263,262,261,267,266,265,264,270,269,268,274,273,272,271,275,276,276,284,283,282,281,280,279,278,286,287,290,289,288,292,291,16477,299,298,297,296,295,294,301,300,306,305,304,303,302,309,308,307,310,312,311,314,313,315,318,317,316,320,319,321,325,324,323,322,327,326,330,329,328,331,16490,342,341,340,339,338,337,336,335,334,333,332,344,343,346,345,347,350,349,348,16495,356,355,354,353,352,351,357,364,363,362,361,360,367,366,365,370,369,368,375,374,373,372,371,376,16516,378,377,380,379,16519,16518,383,382,381,16521,388,387,386,385,384,389,392,391,390,396,395,394,393,399,398,397,400,402,401,404,403,408,407,406,405,409,410,412,411,16530,16529,416,415,414,413,417,421,420,419,418,422,16535,429,428,427,426,425,424,423,430,431,435,434,433,432,16540,436,442,441,440,439,438,437,444,443,447,446,16543,451,450,449,448,16547,454,453,452,456,455,458,457,463,462,461,460,459,464,466,465,468,467,470,469,474,473,472,471,476,475,477,480,479,478,483,482,481,486,488,487,490,491,493,492,497,496,495,494,16561,499,498,500,502,506,505,504,510,509,508,16570,517,516,515,514,513,512,511,520,519,518,521,16575,16574,527,526,525,524,523,522,16577,532,531,530,529,528,535,534,537,536,537,536,540,539,538,542,541,546,545,544,543,549,548,547,16580,554,553,552,551,550,555,556,558,557,16586,16585,563,562,561,560,559,568,567,566,565,564,570,569,571,16591,577,576,575,574,573,572,581,580,579,578,583,582,586,585,584,592,591,590,589,588,587,600,599,598,597,596,595,594,593,602,601,604,603,605,606,608,607,609,610,611,614,613,612,615,16598,618,617,616,621,620,619,623,622,16601,630,629,628,627,626,625,632,631,633,637,636,635,634,16608,16607,639,638,642,641,640,16611,645,644,643,650,649,648,647,646,16613,653,652,651,655,654,659,658,657,656,663,662,661,660,665,664,667,666,671,670,669,668,676,675,674,673,672,679,678,677,685,684,683,682,681,680,687,686,691,690,689,688,693,692,699,698,697,696,695,694,701,700,706,705,704,703,702,16625,710,709,708,707,16627,716,715,714,713,712,711,719,718,717,16630,725,724,723,722,721,720,726,728,727,731,730,729,16634,737,736,735,734,733,732,738,16639,741,740,739,743,742,745,744,16641,750,749,748,747,746,752,751,755,754,753,16648,16647,757,758,16652,761,760,763,762,765,764,16656,767,766,772,771,770,769,768,774,773,776,775,777,780,779,778,16658,781,782,784,783,16663,16662,788,787,786,785,790,789,791,792,793,795,794,16667,801,800,799,798,797,796,14635,802,811,810,809,808,807,806,805,804,803,816,815,814,813,812,817,820,819,822,821,824,823,824,823,826,825,831,830,829,834,833,832,16676,836,835,16678,839,838,837,841,840,844,843,842,848,847,846,845,851,850,849,852,853,855,854,857,856,861,860,859,858,864,863,865,16685,870,869,868,867,866,871,873,872,16687,878,877,876,875,874,879,887,886,885,884,883,882,881,880,889,888,16692,16691,892,891,890,894,893,898,897,896,895,900,16694,902,901,903,904,905,906,909,908,907,913,912,911,910,914,916,917,922,921,920,919,918,927,926,925,924,923,928,930,929,16696,933,932,931,934,939,938,937,936,935,947,946,945,944,943,942,948,950,949,953,952,956,955,954,958,957,959,963,962,961,960,965,966,967,969,968,973,972,971,970,974
//
//            13071,13062,13058,13,12,11,10,9,8,19,18,17,16,15,14,25,24,23,22,21,20,34,33,32,31,30,29,35,37,36,39,38,40,42,41,48,47,46,45,44,43,53,52,51,50,49,55,54,56,57,62,61,60,59,65,64,63,16431,71,70,69,68,67,66,72,73,75,74,77,76,78,80,85,84,83,82,81,90,89,88,87,86,93,92,91,100,99,98,97,96,95,94,103,102,101,105,104,107,106,110,109,108,16435,112,111,16438,16437,119,120,118,117,116,115,114,113,125,124,123,122,121,128,127,126,130,129,133,132,134,136,138,137,140,139,145,144,143,142,146,149,148,147,152,151,150,155,154,153,157,156,159,158,161,160,162,163,165,164,168,167,166,169,170,175,174,173,172,171,180,179,178,177,176,183,182,181,184,192,191,190,189,188,187,186,185,16451,196,195,194,193,16454,199,198,197,200,204,203,202,201,205,207,206,208,210,209,16457,216,215,214,213,212,217,218,221,220,219,222,16463,225,224,223,228,227,226,229,233,232,231,230,16465,236,235,234,238,237,239,246,245,244,243,242,241,240,247,249,248,254,253,252,251,250,16470,259,258,257,256,255,263,262,261,267,266,265,264,270,269,268,274,273,272,271,275,276,276,284,283,282,281,280,279,278,286,287,290,289,288,292,291,16477,299,298,297,296,295,294,301,300,306,305,304,303,302,309,308,307,310,312,311,314,313,315,318,317,316,320,319,321,325,324,323,322,327,326,330,329,328,331,16490,342,341,340,339,338,337,336,335,334,333,332,344,343,346,345,347,350,349,348,16495,356,355,354,353,352,351,357,364,363,362,361,360,367,366,365,370,369,368,375,374,373,372,371,376,16516,378,377,380,379,16519,16518,383,382,381,16521,388,387,386,385,384,389,392,391,390,396,395,394,393,399,398,397,400,402,401,404,403,408,407,406,405,409,410,412,411,16530,16529,416,415,414,413,417,421,420,419,418,422,16535,429,428,427,426,425,424,423,430,431,435,434,433,432,16540,436,442,441,440,439,438,437,444,443,447,446,16543,451,450,449,448,16547,454,453,452,456,455,458,457,463,462,461,460,459,464,466,465,468,467,470,469,474,473,472,471,476,475,477,480,479,478,483,482,481,486,488,487,490,491,493,492,497,496,495,494,16561,499,498,500,502,506,505,504,510,509,508,16570,517,516,515,514,513,512,511,520,519,518,521,16575,16574,527,526,525,524,523,522,16577,532,531,530,529,528,535,534,537,536,537,536,540,539,538,542,541,546,545,544,543,549,548,547,16580,554,553,552,551,550,555,556,558,557,16586,16585,563,562,561,560,559,568,567,566,565,564,570,569,571,16591,577,576,575,574,573,572,581,580,579,578,583,582,586,585,584,592,591,590,589,588,587,600,599,598,597,596,595,594,593,602,601,604,603,605,606,608,607,609,610,611,614,613,612,615,16598,618,617,616,621,620,619,623,622,16601,630,629,628,627,626,625,632,631,633,637,636,635,634,16608,16607,639,638,642,641,640,16611,645,644,643,650,649,648,647,646,16613,653,652,651,655,654,659,658,657,656,663,662,661,660,665,664,667,666,671,670,669,668,676,675,674,673,672,679,678,677,685,684,683,682,681,680,687,686,691,690,689,688,693,692,699,698,697,696,695,694,701,700,706,705,704,703,702,16625,710,709,708,707,16627,716,715,714,713,712,711,719,718,717,16630,725,724,723,722,721,720,726,728,727,731,730,729,16634,737,736,735,734,733,732,738,16639,741,740,739,743,742,745,744,16641,750,749,748,747,746,752,751,755,754,753,16648,16647,757,758,16652,761,760,763,762,765,764,16656,767,766,772,771,770,769,768,774,773,776,775,777,780,779,778,16658,781,782,784,783,16663,16662,788,787,786,785,790,789,791,792,793,795,794,16667,801,800,799,798,797,796,14635,802,811,810,809,808,807,806,805,804,803,816,815,814,813,812,817,820,819,822,821,824,823,824,823,826,825,831,830,829,834,833,832,16676,836,835,16678,839,838,837,841,840,844,843,842,848,847,846,845,851,850,849,852,853,855,854,857,856,861,860,859,858,864,863,865,16685,870,869,868,867,866,871,873,872,16687,878,877,876,875,874,879,887,886,885,884,883,882,881,880,889,888,16692,16691,892,891,890,894,893,898,897,896,895,900,16694,902,901,903,904,905,906,909,908,907,913,912,911,910,914,916,917,922,921,920,919,918,927,926,925,924,923,928,930,929,16696,933,932,931,934,939,938,937,936,935,947,946,945,944,943,942,948,950,949,953,952,956,955,954,958,957,959,963,962,961,960,965,966,967,969,968,973,972,971,970,974
//
//
//        ];
//        $unique_arr = array_unique ( $ids );
//
//        $repeat_arr = array_diff_assoc ( $ids, $unique_arr );
//
//        dd($repeat_arr);



        $save_time = Carbon::now()->toDateTimeString();
        $this->output->progressStart(10000/100);

        $pdo_type = $this->argument('pdo');
        $pdo = $this->getPdo($pdo_type);

        $delete_ids = [];
        $update_date = [];


        for ($i=1; $i<10000; $i = $i+100){
            $word_ids = range($i, $i+99);
            // 查找单词解释
            $words_str = str_repeat("?,", count($word_ids)-1) . "?";;
            // 获得所有单词的例句解释
            $sql = 'select `id`, `wordbank_id`,`part_of_speech`,`translation` , `power` from `wordbank_translation` 
                where `wordbank_id` in ('.$words_str.') and `deleted_at` is null ';
            $res  = $pdo->prepare($sql);
            $res->execute($word_ids);
            $word_trans_list = $res->fetchAll(\PDO::FETCH_ASSOC  );

            collect($word_trans_list)->groupBy('wordbank_id')
                ->map(function ($word) use(&$update_date, &$delete_ids) {


                    $word = $word->sortByDesc('power')->values();
                    $save_trans_str = '';
                    foreach ($word  as $key=>$item){
                        $save_trans_str .= $item['part_of_speech'].' '.$item['translation'].';';
                    }


                    $word = $word->sortBy('power')->values();
                    $save_id = 0;
                    foreach ($word  as $key=>$item){
                        if (!$key){
                            $save_id = $item['id'];
                        }else{
                            $delete_ids[] = $item['id'];
                        }
                    }

                    $save_trans_str = trim($save_trans_str,';');
                    $update_date[] = [
                        'id' => $save_id,
                        'part_of_speech' => '',
                        'translation' => $save_trans_str,
//                        'power' => 1
                    ];

                });
            $this->output->progressAdvance();

        }

        foreach (array_chunk($delete_ids,1000)as  $ids){
            if (count($ids)){
                $delete_ids_str = implode(',', $ids);
                $sql = "UPDATE `wordbank_translation` SET `deleted_at` = '".$save_time."' WHERE `id` IN ($delete_ids_str)";
                $res=$pdo->exec($sql);
                if ($res != count($ids)){
                    dd($sql, '删除单词例句失败');
                }
            }
        }


        foreach (array_chunk($update_date,1000)as  $date){
            config(['database.default' => 'local']);
            if (count($date))
                $this->batchUpdate($date);
        }
        $this->output->progressFinish();


    }

    protected function batchUpdate($multipleData = array())
    {

        if (empty($multipleData)) {
            return false;
        }
        $updateColumn    = array_keys($multipleData[0]);
        $referenceColumn = $updateColumn[0]; //e.g id
        unset($updateColumn[0]);
        $whereIn = "";

        $q = "UPDATE wordbank_translation SET ";
        foreach ($updateColumn as $uColumn) {
            $q .= $uColumn." = CASE ";

            foreach ($multipleData as $data) {
                $q .= "WHEN ".$referenceColumn." = ".$data[$referenceColumn]." THEN '".$data[$uColumn]."' ";
            }
            $q .= "ELSE ".$uColumn." END, ";
        }
        foreach ($multipleData as $data) {
            $whereIn .= "'".$data[$referenceColumn]."', ";
        }
        $q = rtrim($q, ", ")." WHERE ".$referenceColumn." IN (".rtrim($whereIn, ', ').")";

        // Update
        return \DB::update(\DB::raw($q));
    }
}
