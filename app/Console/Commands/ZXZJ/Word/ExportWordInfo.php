<?php

namespace App\Console\Commands\ZXZJ\Word;

use App\Foundation\Excel;
use App\Foundation\PdoBuilder;
use Carbon\Carbon;
use Illuminate\Console\Command;

class ExportWordInfo extends Command
{

    use PdoBuilder;
    use Excel;
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'export:word_info {pdo=local}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '导出教研所需的数据';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }


    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        $words = [
//            'blame','brake','broke','chief','cure','equal','reserve','ruin','scale','suspect','switch','tense','toward','track'
//                'darkness'
            'contrast','contrast','deal','deal','deal','deal','kid','kid','kid','kid','late','late','ring','ring','ring','ring','equal','equal','toward','toward','blame','blame','cure','cure','reserve','reserve','reserve','tense','tense','ruin','ruin','suspect','suspect','scale','scale','scale','scale','switch','switch','brake','brake','track','track','broke','broke','chief','chief'
        ];

        $words = array_unique($words);

        dd($words);

        config(['database.default' => 'zxzj_online_search']);

        $sql = <<<EOF
SELECT * FROM `word`.`wordbank_2` WHERE `id` IN (133,134,183,183,184,184,418,418,419,419,427,428,429,500,500,501,501,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631)
EOF;

        $res = \DB::select(\DB::raw($sql));

//        $res = \DB::table('wordbank')
//            ->selectRaw('vocabulary,wordbank_translation.id as translation_id, part_of_speech, translation')
//            ->leftJoin('wordbank_translation', 'wordbank_translation.wordbank_id', '=', 'wordbank.id')
//            ->whereIn('vocabulary', $words)
//            ->whereNull('wordbank.deleted_at')
//            ->whereNull('wordbank_translation.deleted_at')
//            ->get();

        $export_data = [];
        $export_data[] = [
            '单词','词性','解释','标签id','标签链'
        ];

        $header = ['Authorization:'.''];
        $url = 'https://manage.wxzxzj.com/api/word/get/labelList';
        foreach ($res as $item){
            $vocabulary = $item->vocabulary;
            $part_of_speech = $item->part_of_speech;
            $translation = $item->translation;
            $translation_id = $item->translation_id;

            $data = [
                'translation_id'=>$translation_id,
                'scope'=>'wordbook'
            ];

            $json_res = $this->request($url,true,'post',$data, $header);
            $label_list = json_decode($json_res, true )['data']['label_list'];
            foreach ($label_list as $label_item){
                $export_data[] = [
                    $vocabulary,$part_of_speech,$translation,$label_item['label_id'],$label_item['label_link']
                ];
            }
            echo '+';
        }
        $this->store('漏单词'.rand(0,100), $export_data, '.xlsx');


        dd('done');


        $word_300 = [
            2834,2843,6890,6341,1923,6985,3352,6409,6412,2452,1931,2868,2461,2470,2876,1470,6283,1478,3845,6406,1954,1954,1954,6391,3849,4969,6955,3379,6889,3807,3856,3856,6397,6397,6951,2897,6962,6758,2503,2503,3840,3840,6983,1524,1530,5436,6898,6361,4722,3839,4758,5661,6977,2906,2005,6344,2521,6364,6365,6375,4903,5395,6960,1560,1560,6372,2534,1565,6966,2914,2035,2035,5084,2542,6168,6399,1582,2549,2551,6354,6280,2922,6775,2065,2065,2067,7512,6379,6382,6897,3182,2929,5966,960,2573,1623,2933,4570,2578,5190,9308,6416,6408,976,6989,6899,6899,6899,6343,261,5524,2115,2944,6888,6888,4748,6392,6348,6414,6390,1652,6353,2602,5318,2955,2955,6751,2956,6903,6385,6958,3828,2150,6377,2152,2152,6979,6893,6891,6395,6982,2160,1686,3820,6369,6904,6405,6402,2621,6782,6349,1031,6967,6360,1693,2627,6374,2173,3837,6468,3881,2633,6380,8749,6666,3803,1698,6376,6366,6366,6991,6990,6350,3859,2976,6974,3848,2184,6469,3810,6358,2206,2983,6121,2653,8684,6411,2664,6386,6954,6351,2996,6381,2671,2671,6978,6978,6387,2672,3001,1741,6984,6087,4396,4426,2244,6396,2255,6403,4394,6371,1755,1755,2260,1756,6357,1126,1126,6363,2271,3814,3814,6986,6346,2684,6400,3025,1146,3879,6952,6384,1795,6417,3825,3825,6895,6969,4176,6905,2307,1172,6373,3858,1815,3847,6359,2711,2711,1188,1821,3823,2720,5423,2334,6401,6887,3249,6367,6367,6367,3056,6896,3826,3875,3875,4992,2343,2345,6404,2346,3257,6912,3824,3824,6356,2741,6964,6963,6362,4175,3872,3487,3487,2763,3272,3880,9553,6980,6902,6972,5600,6987,6368,3083,7421,3844,3291,6971,2787,3906,2788,6970,3805,2798,1328,6965,3817,6900,1343,6355,6901,1355,2813,9501,6410,3112,6968,1896,6398,3518,6347,3860,6894,6892,3585,3585,6961,1387,1387,2824,3124,6370,6383
        ];
        $word_mess = [
            820,832,23,23,27,1447,1447,38,38,39,39,39,2878,2878,857,858,858,861,865,865,866,1471,1471,1481,4933,67,69,69,1484,70,70,1487,77,77,892,896,896,4144,4144,82,82,86,86,92,901,901,93,93,6001,98,1510,1510,2501,109,109,1982,1982,1516,1517,1529,1529,1989,1989,120,920,920,124,124,128,1534,1534,129,129,132,134,133,1996,1996,1999,6621,6621,2002,1538,1538,929,929,2008,2008,1544,1544,3946,1546,137,137,139,139,139,140,140,1547,1547,143,144,148,1553,152,152,152,936,936,154,156,156,939,939,940,4039,160,160,161,165,165,943,943,166,166,169,1578,1578,2046,1585,1585,1590,1590,1596,3793,6913,6913,187,1601,188,188,949,949,1603,191,191,3770,1604,193,193,194,194,195,196,196,196,197,197,203,205,205,4048,4048,3991,209,209,209,210,3552,3552,212,212,213,213,214,217,957,957,964,229,229,1629,232,232,235,1634,1634,1634,236,236,236,968,238,238,240,240,970,969,245,247,249,2106,2106,1641,1641,254,3654,256,256,257,257,1643,259,259,982,982,263,263,263,984,984,2112,265,265,268,268,1646,1646,990,990,990,272,272,272,1648,1648,274,274,1650,1650,277,277,283,283,1654,1654,286,286,286,2127,2127,292,292,998,998,294,2606,2606,295,295,1661,1661,306,306,307,307,1003,1003,309,3607,3607,319,319,322,322,1017,1017,326,326,326,331,331,346,346,2153,2153,1681,1681,358,2162,2162,366,366,2629,2629,6467,6467,1034,2176,2176,1697,1697,377,377,378,378,1046,1046,381,381,382,393,393,395,395,396,396,399,399,4186,4186,402,402,403,403,403,4158,4158,4158,2189,409,409,409,411,411,411,412,412,412,413,413,413,414,414,2193,2193,416,3581,424,424,1056,425,425,2200,1061,1061,434,2220,2220,1731,1731,1098,490,500,500,3571,514,523,1765,2285,1161,565,565,565,566,568,568,576,1184,1184,1820,1198,1198,586,586,586,587,587,1199,1199,592,592,1200,1200,596,596,596,596,597,597,599,599,6577,6577,601,601,604,607,607,3577,3577,612,612,1218,1221,1221,2738,2738,617,617,1226,1226,1227,1227,1842,1842,624,624,629,629,632,632,4262,4262,6296,1848,1848,2756,2756,2756,645,645,1849,1849,1260,1260,1261,1261,2766,2766,1263,1263,1271,1271,667,1273,1273,1278,1278,1857,1857,671,671,674,674,1282,1282,1286,1286,734,734,1335,1335,768,768,782,782
        ];
        $word_single = [

        ];


        $label_ids = [
            144,145,146,147,148,149,3501,3505,3506,1228,1230,3507,3508,3511,3543,3677,3708,3709,3744,3825,3827,3860,3861,5802,5803,5804,5805,5806,5807,5809,5836,5844,5849,5855,5886,5891,6595,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,3509,3510,3512,3513,3514,3515,3516,3517,3518,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3769,3770,3771,3772,3773,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3826,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4113,4116,4118,4121,4123,4128,4130,4133,4135,4136,4137,4139,4141,4144,4948,4954,4957,4960,4963,4965,4969,4974,4976,4978,4981,4983,4987,4988,4990,5037,5075,5078,5081,5083,5091,5094,5096,5099,5100,5103,5105,5108,5110,5112,5898,5905,5910,5913,5916,5920,5924,5928,5932,5935,5937,5941,5944,5948,5951,5956,5958,5961,5963,5964,5966,5968,5970,5972,5975,5977,5979,5980,5981,5982,5992,5994,5995,5998,6000,6001,6002,6003,6004,6005,6006,6008,6009,6010,6011,6027,6029,6031,6032,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6133,6134,6765,6766,6767,6768,6769,6770,200,249,250,2025,9473,1906,2122,2124,2125,8031,8032,8033,8395,8396,8850,9323,9324,9325,9474,9475,9476,9577,9578,9579,1907,2123,2126,2127,8397,8398,8399,8400,8401,8402,8403,8404,8405,8406,8407,8408,8409,8410,8411,8412,8413,8414,8415,8416,8417,8418,8419,8420,8421,8422,8423,8424,8425,8426,8427,8428,8429,8430,8431,8432,8433,8434,8435,8436,8437,8438,8439,8440,8441,8442,8443,8444,8445,8446,8447,8448,8449,8450,8451,8452,8453,8454,8455,8456,8457,8458,8459,8460,8461,8462,8463,8464,8465,8474,8475,8476,8477,8478,8479,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9568,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,8480,8481,8482,8483,8484,8485,8486,8487,8488,8489,8490,8491,8492,8493,8494,8495,8496,8497,8498,8499,8500,8501,8502,8503,8504,8505,8506,8507,8508,8509,8510,8511,8512,8513,8514,8515,8516,8517,8518,8519,8520,8521,8522,8523,8524,8525,8526,8527,8528,8529,8530,8531,8532,8533,8534,8535,8536,8537,8538,8539,8540,8541,8542,8543,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,8556,8557,8558,8559,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8570,8571,8572,8573,8574,171,172,173,8168,9326,9417,7348,8069,8070,8215,8216,8958,9327,9418,9419,9420,7349,7350,7351,7352,8071,8072,8073,8074,8075,8076,8077,8078,8169,8170,8171,8172,8173,8174,8175,8176,8959,8960,8961,8962,9328,9329,9330,9331,9332,9333,9421,9422,9423,9424,9425,9426,9427,9428,9429,9430,9431,7353,7354,7355,7356,7357,7358,7359,7360,7361,7362,7363,7364,7365,7366,7367,7368,7369,7370,7371,7372,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8106,8107,8108,8147,8148,8149,8150,8151,8152,8153,8154,8155,8156,8157,8158,8160,8161,8162,8163,8164,8165,8177,8178,8179,8180,8181,8182,8183,8184,8185,8186,8187,8188,8189,8190,8191,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8208,8209,8210,8211,8212,8213,8214,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239,8240,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252,8253,8254,8255,8256,8257,8258,8259,8260,8261,8262,8263,8264,8265,8266,8267,8268,8269,8270,8271,8272,8273,8274,8275,8276,8277,8278,8279,8280,8281,8282,8283,8284,8285,8286,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,8304,8305,8306,8307,8308,8309,8310,8311,8312,8313,8314,8315,8316,8317,8318,8963,8964,8965,8966,8967,8968,8969,8970,8971,8972,8973,8974,8975,8976,8977,8978,8979,8980,8981,8982,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9450,9451,9452,9453,9454,9455,9456,9457,9458,9459,9460,9461,9462,9463,9464,9465,9466,9467,9468,9469,9470,9471,9472
        ];

        $pdo_type = $this->argument('pdo');
        $pdo = $this->getPdo($pdo_type);
        $word_label_map = [];

        $export_data =  [];


        $this->output->progressStart(ceil(count($label_ids)/10));
        foreach (array_chunk($label_ids, 10) as $label_chunk){

            // 获得 label_overview 数据
            $label_str = str_repeat("?,", count($label_chunk)-1) . "?";;
            // 获得所有单词的例句解释
            $sql = 'select  `label_id`,`content` from `wordbank_label_overview` where `label_id` in ('.$label_str.')';
            $res  = $pdo->prepare($sql);
            $res->execute($label_chunk);
            $word_label_list = $res->fetchAll(\PDO::FETCH_ASSOC  );

            if (empty($word_label_list)){
                continue;
            }

            foreach ($word_label_list as $item){
                $label_id = $item['label_id'];
                $word_str = $item['content'];

                $word_arr = explode(',', $word_str);

                foreach ($word_arr as $word){
                    if (isset($word_label_map[$word])){
                        $word_label_map[$word][] = $label_id;
                    }else{
                        $word_label_map[$word] = [] ;
                        $word_label_map[$word][] = $label_id;
                    }
                }
            }
            $this->output->progressAdvance();
        }
        $this->output->progressFinish();
        ksort($word_label_map);
        $this->info('单词标签关系获取完毕');

        $this->output->progressStart(ceil(count($word_label_map)/10));
        foreach (array_chunk($word_label_map, 10,TRUE) as $word_label_map_chunk){


            $word_ids = array_keys($word_label_map_chunk);
            $words_str = str_repeat("?,", count($word_ids)-1) . "?";
            \DB::enableQueryLog();

            // 获得所有单词的例句解释
            $sql = 'select  `wordbank`.`id` wordbank_id,`vocabulary`,`wordbank_translation`.`id` translation_id,`translation` , `wordbank_sentence`.`id` sentence_id,`sentence`, `explain` from `wordbank`  left  JOIN  `wordbank_translation` ON `wordbank`.`id` = `wordbank_translation`.`wordbank_id` left  JOIN  `wordbank_sentence` ON `wordbank`.`id` = `wordbank_sentence`.`wordbank_id` where `wordbank`.`id` in ('.$words_str.') and `wordbank`.`deleted_at` is null  and `wordbank_sentence`.`deleted_at` is null  and `wordbank_translation`.`deleted_at` is null';
            $res  = $pdo->prepare($sql);
            $res->execute($word_ids);
            $word_info_list = $res->fetchAll(\PDO::FETCH_ASSOC  );

            foreach ($word_info_list as $word_info_item){
                $tmp = [];
                $tmp = $word_info_item;
                $word_id = $word_info_item['wordbank_id'];
                $local = 0;
                if (in_array($word_id,$word_single)){
                    $local = 1;
                }
                if (in_array($word_id,$word_mess)){
                    $local = 2;
                }
                if (in_array($word_id,$word_300)){
                    $local = 3;
                }
                $label_arr = $word_label_map_chunk[$word_id];
                $label_arr = array_unique($label_arr);
                $label_str = implode(',', $label_arr);
                $tmp['label_ids'] = $label_str;
                $tmp['before'] = $local;

                $export_data[] = $tmp;
            }


            $this->output->progressAdvance();
        }
        $this->output->progressFinish();



        // 保存到文件
        $this->store('单词例句解释_新'.rand(0,100), $export_data, '.xlsx');

        dd($export_data);

        $path = '/home/vagrant/code/sql_analyze/storage/imports';
        $this->traverse($path);

        $this->output->progressStart(count($this->filePath));

        $pdo_type = $this->argument('pdo');
        $pdo = $this->getPdo($pdo_type);

        $save_data = [];
        foreach ($this->filePath as  $file) {
            if (strpos($file, '.gitignore') || strpos($file, 'abc')) {
                $this->output->progressAdvance();
                continue;
            }
            \Log::info($file);
            $contents = $this->import($file);
            $header = array_shift($contents);
            $header = array_filter($header);
            $key_tran = array_flip($header);
            ###检查文件####
            #$save_count = 0;
            #$empty_count = 0;
            ##############
            foreach ($contents as $content) {
                ###检查文件####
//                if(empty($content[$key_tran['单词']])&& empty($content[$key_tran['词性1']])
//                    && empty($content[$key_tran['解释1']]) && empty($content[$key_tran['最小标签的ID']])){
//                    $empty_count++;
//                    if ($save_count<3&&$empty_count>5){
//                        \Log::info($file);
//                        break;
//                    }
//                    continue;
//                }
//                $save_count++;
                ##############

                if(empty($content[$key_tran['单词']])&& empty($content[$key_tran['词性1']])
                    && empty($content[$key_tran['解释1']]) && empty($content[$key_tran['最小标签的ID']])){
                    continue;
                }
                $word = trim($content[$key_tran['单词']]);
                $speed_1 = $this->handleSpeed($content[$key_tran['词性1']]);
                $trans_1 = $this->handleTranslation($content[$key_tran['解释1']]);
                $label_id = trim($content[$key_tran['最小标签的ID']]);


                if (!isset($save_data[$word])){
                    $save_data[$word] = [];
                }
                if (!isset($save_data[$word][$speed_1])){
                    $save_data[$word][$speed_1] = [];
                }
                if (!isset($save_data[$word][$speed_1][$trans_1])){
                    $this->handleTrans($save_data[$word][$speed_1], $trans_1);
//                    $save_data[$word][$speed_1][$trans_1] = [];
                }
                $save_data[$word][$speed_1][$trans_1][] = $label_id;


                if (isset($key_tran['词性2'])&&isset($key_tran['解释2'])&&!empty($content[$key_tran['词性2']]) && empty($content[$key_tran['解释2']])){
                    $speed_2 = $this->handleSpeed($content[$key_tran['词性2']]);
                    $trans_2 = $this->handleTranslation($content[$key_tran['解释2']]);

                    if (!isset($save_data[$word][$speed_2])){
                        $save_data[$word][$speed_2] = [];
                    }
                    if (!isset($save_data[$word][$speed_2][$trans_2])){
                        $this->handleTrans($save_data[$word][$speed_2], $trans_2);
//                        $save_data[$word][$speed_2][$trans_2] = [];
                    }
                    $save_data[$word][$speed_2][$trans_2][] = $label_id;

                }
            }
            $this->output->progressAdvance();
        }


        // 获取 库里的 数据
        $vocabulary = array_keys($save_data);
        $words_str = str_repeat("?,", count($vocabulary)-1) . "?";;
        // 获得所有单词的例句解释
        $sql = 'select  `vocabulary`,`wordbank_id`,`sentence` , `explain` from `wordbank_sentence` 
                INNER  JOIN  `wordbank` ON `wordbank`.`id` = `wordbank_sentence`.`wordbank_id`
                where `vocabulary` in ('.$words_str.') and `wordbank_sentence`.`deleted_at` is null 
                and `wordbank`.`deleted_at` is null';
        $res  = $pdo->prepare($sql);
        $res->execute($vocabulary);
        $word_sentence_list = $res->fetchAll(\PDO::FETCH_ASSOC  );
        $word_sentence_list = collect($word_sentence_list)->keyBy('vocabulary')->toArray();

        // 获取所有的单词
        $sql = 'select  `vocabulary`,`id` from `wordbank` where `vocabulary` in ('.$words_str.') and `wordbank`.`deleted_at` is null';
        $res  = $pdo->prepare($sql);
        $res->execute($vocabulary);
        $word_list = $res->fetchAll(\PDO::FETCH_ASSOC  );
        $word_list = collect($word_list)->pluck('id','vocabulary')->toArray();

        // 拼接数据
        $export_data = [];
        $export_data[] = ['vocabulary', 'part_of_speech', 'translation',  'sentence', 'explain', 'word_id','label_ids'];
        foreach ($save_data as $word=>$speeds){
            $is_first = true;
            $had_word =     isset($word_list[$word])? 1 : 0;
            $had_sentence = isset($word_sentence_list[$word])? 1 : 0;
            foreach ($speeds as $speed=>$trans){
                foreach ($trans as $tran=>$labels){
                    if (!$had_word){
                        $export_data[] = [
                            $word,
                            $speed,
                            $tran,
                            '',
                            '',
                            '单词未录入',
                            implode(',', $labels)
                        ];
                        continue;
                    }
                    if (!$had_sentence){
                        $export_data[] = [
                            $word,
                            $speed,
                            $tran,
                            '单词未上传例句',
                            '单词未上传例句',
                            $word_list[$word],
                            implode(',', $labels)
                        ];
                        continue;
                    }
                    if ($is_first){
                        $export_data[] = [
                            $word,
                            $speed,
                            $tran,
                            $word_sentence_list[$word]['sentence'],
                            $word_sentence_list[$word]['explain'],
                            $word_list[$word],
                            implode(',', $labels)
                        ];
                        $is_first = false;
                    }else{
                        $export_data[] = [
                            $word,
                            $speed,
                            $tran,
                            '',
                            '',
                            $word_list[$word],
                            implode(',', $labels)
                        ];
                    }
                }
            }
        }

        // 保存到文件
        $this->store('单词例句解释'.rand(0,100), $export_data, '.xlsx');
        $this->output->progressFinish();
    }

    // 处理词性
    public function handleSpeed($speed)
    {
        $speed = str_replace(chr(194).chr(160), ' ',$speed);
        $speed = trim($speed);
        if (strpos($speed, '.')===false){
            $speed = $speed.'.';
        }
        return $speed;
    }

    // 处理解释
    public function handleTranslation($translation)
    {
        $translation = trim($translation);
        
        $trans1 = [
            ";"     => "；",
            "，"    => "；",
            ","     => "；",
            "："     => "；",

            "..."   => "......",
            "……"    => "......",
            "⋯⋯"    => "......",


            "("    => "（",
            ")"    => "）",



            "0"     => '零',
            "—"     => "一",
            "1"     => "一",
            "2"     => "二",
            "3"     => "三",
            "4"     => "四",
            "5"     => "五",
            "6"     => "六",
            "7"     => "七",
            "8"     => "八",
            "9"     => "九",
            "10"     => "十",
            "11"     => "十一",
            "12"     => "十二",
            "13"     => "十三",
            "14"     => "十四",
            "15"     => "十五",
            "16"     => "十六",
            "17"     => "十七",
            "18"     => "十八",
            "19"     => "十九",
            "20"     => "二十",
            "21"     => "二十一",
            "30"     => "三十",
            "40"     => "四十",
            "50"     => "五十",
            "60"     => "六十",
            "70"     => "七十",
            "80"     => "八十",
            "90"     => "九十",
            "100"    => "一百",

            '周一'		=> '星期一',
            '周二'		=> '星期二',
            '周三'		=> '星期三',
            '周四'		=> '星期四',
            '周五'		=> '星期五',
            '周六'		=> '星期六',
            '星期天'		=> '星期日',
            '周日'		=> '星期日',

        ];


        $translation = strtr($translation, $trans1);
        
        return $translation;
    }

    // 处理解释
    public function handleTrans(&$list, &$item)
    {
        if (count($list)){
            $is_did = false;
            // 已存在
            $trans_list = array_keys($list);
            foreach ($trans_list as $old_tran){
                $old_tran_list = explode('；', $old_tran);
                $item_list = explode('；', $item);
                if (count($old_tran_list) > 1 && count($item_list) > 1){
                    // 两个相等
                    if (count($old_tran_list) == count(array_intersect($old_tran_list, $item_list))){
                        $item = $old_tran;
                        $is_did = true;
                        break;
                    }
                    // old 大
                    if (count(array_diff($old_tran_list,$item_list)) && !count(array_diff($item_list,$old_tran_list))){
                        $item = $old_tran;
                        $is_did = true;
                        break;
                    }

                    // item 大
                    if (!count(array_diff($old_tran_list,$item_list)) && count(array_diff($item_list,$old_tran_list))){
                        $tmp = $list[$old_tran];
                        $list[$item] = $tmp;
                        unset($list[$old_tran]);

                        $is_did = true;
                        break;
                    }

                    // 互不覆盖
                }


                if (count($old_tran_list) == 1  && count($item_list) > 1){
                    if (in_array($old_tran, $item_list)){
                        if (!isset($list[$item])){
                            $list[$item] = [];
                        }
                        $list[$item] = array_merge($list[$item], $list[$old_tran]);
                        unset($list[$old_tran]);
                    }
                    $is_did = true;
                    continue;
                }

                if (count($old_tran_list) > 1 && count($item_list) == 1){
                    if (in_array($item, $old_tran_list)){
                        $item = $old_tran;
                        $is_did = true;
                        break;
                    }
                }

                if (count($old_tran_list) == 1 && count($item_list) == 1){
                    if($old_tran == $item){
                        $is_did = true;
                        break;
                    }
                }
            }

            if (!$is_did){
                $list[$item] = [];
            }
        }else{
            $list[$item] = [];
        }
    }




    function request($url,$https=true,$method='get',$data=null,$header=[]) {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        if ($https == true){
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER,false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST,false);
        }
        if ($method == 'post'){
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        }
        if (count($header)){
            curl_setopt($ch, CURLOPT_HTTPHEADER,$header);
        }
        $ret = curl_exec($ch);
        if (curl_errno($ch)) {
            return curl_error($ch);
        }
        curl_close($ch);
        return $ret;
    }

}
